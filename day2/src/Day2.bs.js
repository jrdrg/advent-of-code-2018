// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Input$Day2 = require("./Input.bs.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function letterCounts(str, _index, _counts) {
  while(true) {
    var counts = _counts;
    var index = _index;
    if (index === str.length) {
      return counts;
    } else {
      var letter = Caml_string.get(str, index);
      var count = Belt_MapInt.getWithDefault(counts, letter, 0);
      var incrementedCount = Belt_MapInt.set(counts, letter, count + 1 | 0);
      _counts = incrementedCount;
      _index = index + 1 | 0;
      continue ;
    }
  };
}

function b2i(b) {
  if (b) {
    return 1;
  } else {
    return 0;
  }
}

function hasExactly2(counts) {
  var b = Belt_MapInt.some(counts, (function (_k, v) {
          return v === 2;
        }));
  if (b) {
    return 1;
  } else {
    return 0;
  }
}

function hasExactly3(counts) {
  var b = Belt_MapInt.some(counts, (function (_k, v) {
          return v === 3;
        }));
  if (b) {
    return 1;
  } else {
    return 0;
  }
}

var sums = $$Array.fold_left((function (param, param$1) {
        return /* tuple */[
                param[0] + param$1[0] | 0,
                param[1] + param$1[1] | 0
              ];
      }), /* tuple */[
      0,
      0
    ], $$Array.map((function (id) {
            var counts = letterCounts(id, 0, Belt_MapInt.empty);
            return /* tuple */[
                    hasExactly2(counts),
                    hasExactly3(counts)
                  ];
          }), Input$Day2.input));

var sum3 = sums[1];

var sum2 = sums[0];

console.log("Part 1", Caml_int32.imul(sum2, sum3));

var compare = Caml_obj.caml_compare;

var TupleMap = $$Map.Make(/* module */[/* compare */compare]);

function matchSubstrings(str, _index, _dict) {
  while(true) {
    var dict = _dict;
    var index = _index;
    var last = (function(index){
    return function last(s) {
      return $$String.sub(s, index + 1 | 0, (s.length - 1 | 0) - index | 0);
    }
    }(index));
    if (index === str.length) {
      return /* tuple */[
              false,
              dict,
              /* tuple */[
                "",
                -1
              ]
            ];
    } else {
      var substr;
      if (index !== 0) {
        if (index === (str.length - 1 | 0)) {
          substr = $$String.sub(str, 0, index);
        } else {
          var f = $$String.sub(str, 0, index);
          var l = last(str);
          substr = f + l;
        }
      } else {
        substr = last(str);
      }
      var key = /* tuple */[
        substr,
        index
      ];
      var exit = 0;
      var val;
      try {
        val = Curry._2(TupleMap[/* find */21], key, dict);
        exit = 1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          _dict = Curry._3(TupleMap[/* add */3], key, str, dict);
          _index = index + 1 | 0;
          continue ;
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        return /* tuple */[
                true,
                dict,
                key
              ];
      }
      
    }
  };
}

function findPrototype(strings, _index, _dict) {
  while(true) {
    var dict = _dict;
    var index = _index;
    if (index === strings.length) {
      return "Nothing found";
    } else {
      var str = Caml_array.caml_array_get(strings, index);
      var match = matchSubstrings(str, 0, dict);
      if (match[0]) {
        return match[2][0];
      } else {
        _dict = match[1];
        _index = index + 1 | 0;
        continue ;
      }
    }
  };
}

var commonLetters = findPrototype(Input$Day2.input, 0, TupleMap[/* empty */0]);

console.log("Part 2", commonLetters);

var IntMap = 0;

exports.IntMap = IntMap;
exports.letterCounts = letterCounts;
exports.b2i = b2i;
exports.hasExactly2 = hasExactly2;
exports.hasExactly3 = hasExactly3;
exports.sums = sums;
exports.sum2 = sum2;
exports.sum3 = sum3;
exports.TupleMap = TupleMap;
exports.matchSubstrings = matchSubstrings;
exports.findPrototype = findPrototype;
exports.commonLetters = commonLetters;
/* sums Not a pure module */
