// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Input$Day1 = require("./Input.bs.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function updateFrequency(frequency, change) {
  var firstChar = Caml_string.get(change, 0);
  var rest = $$String.sub(change, 1, change.length - 1 | 0);
  switch (firstChar) {
    case 43 : 
        return frequency + Caml_format.caml_int_of_string(rest) | 0;
    case 44 : 
        return frequency;
    case 45 : 
        return frequency - Caml_format.caml_int_of_string(rest) | 0;
    default:
      return frequency;
  }
}

var output = $$Array.fold_left(updateFrequency, 0, Input$Day1.input);

console.log("Part 1", output);

function checkFrequencyCounts(input, _countMap, _frequency, _index) {
  while(true) {
    var index = _index;
    var frequency = _frequency;
    var countMap = _countMap;
    var idx = Caml_int32.mod_(index, input.length);
    var change = Caml_array.caml_array_get(input, idx);
    var freq = updateFrequency(frequency, change);
    var timesCounted = Belt_MapInt.getWithDefault(countMap, freq, 0) + 1 | 0;
    if (timesCounted !== 2) {
      _index = idx + 1 | 0;
      _frequency = freq;
      _countMap = Belt_MapInt.set(countMap, freq, timesCounted);
      continue ;
    } else {
      return freq;
    }
  };
}

var firstTwice = checkFrequencyCounts(Input$Day1.input, Belt_MapInt.empty, 0, 0);

console.log("Part 2", firstTwice);

var frequencyCounts = Belt_MapInt.empty;

exports.updateFrequency = updateFrequency;
exports.output = output;
exports.checkFrequencyCounts = checkFrequencyCounts;
exports.frequencyCounts = frequencyCounts;
exports.firstTwice = firstTwice;
/* output Not a pure module */
