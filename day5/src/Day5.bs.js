// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Stack = require("bs-platform/lib/js/stack.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Input$Day5 = require("./Input.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function isLowerCase(c) {
  return Char.lowercase(c) === c;
}

function isUpperCase(c) {
  return Char.uppercase(c) === c;
}

function isOppositeCase(c1, c2) {
  if (Char.lowercase(c1) === Char.lowercase(c2)) {
    if (Char.lowercase(c1) === c1 && Char.uppercase(c2) === c2) {
      return true;
    } else if (Char.uppercase(c1) === c1) {
      return Char.lowercase(c2) === c2;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function processChar(str, _index, excludeChar, currStack) {
  while(true) {
    var index = _index;
    if (index >= str.length) {
      return currStack;
    } else {
      var current = Caml_string.get(str, index);
      var exit = 0;
      if (excludeChar !== undefined) {
        if (Char.lowercase(current) !== Char.lowercase(excludeChar)) {
          exit = 1;
        }
        
      } else {
        exit = 1;
      }
      if (exit === 1) {
        var exit$1 = 0;
        var ch;
        try {
          ch = Stack.pop(currStack);
          exit$1 = 2;
        }
        catch (exn){
          if (exn === Stack.Empty) {
            Stack.push(current, currStack);
          } else {
            throw exn;
          }
        }
        if (exit$1 === 2) {
          if (!isOppositeCase(current, ch)) {
            Stack.push(ch, currStack);
            Stack.push(current, currStack);
          }
          
        }
        
      }
      _index = index + 1 | 0;
      continue ;
    }
  };
}

var stack = processChar(Input$Day5.input, 0, undefined, Stack.create(/* () */0));

console.log("Part 1:", Stack.length(stack));

var shortest = $$Array.fold_left((function (currentMin, code) {
        var ch = Pervasives.char_of_int(code);
        var length = Stack.length(processChar(Input$Day5.input, 0, ch, Stack.create(/* () */0)));
        var match = length < currentMin;
        if (match) {
          return length;
        } else {
          return currentMin;
        }
      }), Input$Day5.input.length, Belt_Array.range(/* "a" */97, /* "z" */122));

console.log("Part 2:", shortest);

exports.isLowerCase = isLowerCase;
exports.isUpperCase = isUpperCase;
exports.isOppositeCase = isOppositeCase;
exports.processChar = processChar;
exports.stack = stack;
exports.shortest = shortest;
/* stack Not a pure module */
